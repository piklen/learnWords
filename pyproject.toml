[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "learnwords"
version = "1.0.0"
description = "AI-powered lesson plan generator for educators"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "LearnWords Team", email = "team@learnwords.dev"}
]
maintainers = [
    {name = "LearnWords Team", email = "team@learnwords.dev"}
]
keywords = ["education", "ai", "lesson-planning", "teaching", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.1,<0.105.0",
    "uvicorn[standard]>=0.24.0,<0.25.0",
    "sqlalchemy>=2.0.23,<2.1.0",
    "psycopg2-binary>=2.9.9,<3.0.0",
    "alembic>=1.12.1,<1.13.0",
    "redis>=5.0.1,<6.0.0",
    "python-jose[cryptography]>=3.3.0,<4.0.0",
    "passlib[bcrypt]>=1.7.4,<2.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "celery>=5.3.4,<6.0.0",
    "python-docx>=1.1.0,<2.0.0",
    "reportlab>=4.0.7,<5.0.0",
    "pillow>=10.1.0,<11.0.0",
    "pydantic-settings>=2.1.0,<3.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "loguru>=0.7.2,<1.0.0",
    "python-dateutil>=2.8.2,<3.0.0",
    "pytz>=2023.3",
    "boto3>=1.34.0,<2.0.0",
    "google-generativeai>=0.3.2,<1.0.0",
    "openai>=1.3.7,<2.0.0",
    "anthropic>=0.8.1,<1.0.0",
    "httpx>=0.25.2,<1.0.0",
    "websockets>=12.0,<13.0",
    "aiofiles>=23.2.0,<24.0.0",
    "psutil>=5.9.0,<6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=23.12.0",
    "ruff>=0.1.8",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "coverage>=7.3.3",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.2",
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "factory-boy>=3.3.0",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-section-index>=0.3.8",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "grafana-client>=3.7.0",
    "elasticsearch>=8.8.0",
]

[project.urls]
Homepage = "https://github.com/learnwords/learnwords"
Documentation = "https://learnwords.readthedocs.io"
Repository = "https://github.com/learnwords/learnwords"
"Bug Tracker" = "https://github.com/learnwords/learnwords/issues"
Changelog = "https://github.com/learnwords/learnwords/blob/main/CHANGELOG.md"

[project.scripts]
learnwords = "app.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
app = ["py.typed"]

# Black 代码格式化
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # 排除的目录
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

# Ruff 代码检查和格式化
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "ICN", # flake8-import-conventions
    "S",   # flake8-bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "ARG", "E501"]

[tool.ruff.isort]
known-first-party = ["app"]

# MyPy 类型检查
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest 配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]
asyncio_mode = "auto"

# Coverage 配置
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
