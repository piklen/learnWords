user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# 工作进程优化
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 日志格式
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    log_format json escape=json '{'
                    '"timestamp": "$time_iso8601",'
                    '"remote_addr": "$remote_addr",'
                    '"remote_user": "$remote_user",'
                    '"request": "$request",'
                    '"status": $status,'
                    '"body_bytes_sent": $body_bytes_sent,'
                    '"request_time": $request_time,'
                    '"upstream_response_time": "$upstream_response_time",'
                    '"upstream_connect_time": "$upstream_connect_time",'
                    '"upstream_header_time": "$upstream_header_time",'
                    '"http_referrer": "$http_referer",'
                    '"http_user_agent": "$http_user_agent",'
                    '"http_x_forwarded_for": "$http_x_forwarded_for"'
                    '}';

    access_log /var/log/nginx/access.log json;

    # 基本设置
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 4096;
    server_tokens off;
    
    # 文件上传限制
    client_max_body_size 50M;
    client_body_buffer_size 1M;
    client_header_buffer_size 4k;
    large_client_header_buffers 4 16k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # 缓冲区设置
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    proxy_temp_file_write_size 8k;

    # 连接超时
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/octet-stream;

    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=global:10m rate=50r/s;
    
    # 连接限制
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # 缓存配置
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=api_cache:10m max_size=1g 
                     inactive=60m use_temp_path=off;
    proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m max_size=1g 
                     inactive=1d use_temp_path=off;

    # 上游服务器组 - 应用服务器
    upstream app_servers {
        least_conn;
        server app1:6773 max_fails=3 fail_timeout=30s weight=1;
        server app2:6773 max_fails=3 fail_timeout=30s weight=1 backup;
        
        # 健康检查配置
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # 上游服务器组 - WebSocket
    upstream websocket_servers {
        ip_hash;  # WebSocket需要会话保持
        server app1:6773 max_fails=3 fail_timeout=30s;
        server app2:6773 max_fails=3 fail_timeout=30s backup;
    }

    # 主服务器配置
    server {
        listen 80;
        server_name _;

        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # 连接限制
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;

        # 全局限流
        limit_req zone=global burst=100 nodelay;

        # 健康检查端点（不缓存，不限流）
        location = /health {
            access_log off;
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket支持
        location /api/v1/ws/ {
            proxy_pass http://websocket_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket特定设置
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
            proxy_buffering off;
        }

        # API端点
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # API缓存配置
            proxy_cache api_cache;
            proxy_cache_methods GET HEAD;
            proxy_cache_valid 200 302 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            proxy_cache_bypass $arg_nocache $arg_comment $http_pragma $http_authorization;
            proxy_no_cache $arg_nocache $arg_comment $http_pragma $http_authorization;
            
            # 缓存头
            add_header X-Cache-Status $upstream_cache_status;
            
            # 错误处理
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;
        }

        # 文件上传端点
        location /api/v1/documents/upload {
            limit_req zone=upload burst=5 nodelay;
            
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 上传特定设置
            client_max_body_size 50M;
            proxy_request_buffering off;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }

        # 静态文件服务
        location /uploads/ {
            alias /var/www/uploads/;
            
            # 静态文件缓存
            proxy_cache static_cache;
            proxy_cache_valid 200 1d;
            proxy_cache_key "$uri";
            
            # 浏览器缓存
            expires 1d;
            add_header Cache-Control "public, immutable";
            add_header X-Cache-Status $upstream_cache_status;
            
            # 安全设置
            add_header X-Content-Type-Options nosniff;
            location ~* \.(php|jsp|cgi|asp|aspx)$ {
                deny all;
            }
        }

        location /static/ {
            alias /var/www/static/;
            
            # 静态资源缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
            
            # Gzip压缩
            gzip_static on;
            
            # 安全设置
            add_header X-Content-Type-Options nosniff;
        }

        # API文档（开发环境）
        location /api/docs {
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # 默认请求
        location / {
            proxy_pass http://app_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 默认缓存
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            add_header X-Cache-Status $upstream_cache_status;
        }

        # 监控端点
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.22.0.0/16;  # Docker网络
            deny all;
        }

        # 阻止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 阻止访问备份文件
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }

    # HTTPS服务器配置（如果有SSL证书）
    server {
        listen 443 ssl http2;
        server_name _;

        # SSL配置
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozTLS:10m;
        ssl_session_tickets off;

        # 现代SSL配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # 其他配置与HTTP相同
        include /etc/nginx/conf.d/common.conf;
    }
}
